React Udemy Course

Component or View
	snippets of JS code producing HTML. collection of JS functions producing HTML.

JSX 
    A subset or dialect of JS which lets us write HTML inside JS. Webpack and babel, transpiles this JSX into vanilla JS which produce HTML.

React vs React DOM
	react creates and manages components whereas react-dom deals with rendering them in the DOM.

-> instantiate your components before you render them to the DOM
-> using a tag (app is a type or class) <app /> (self closing tag - when you have a tag with no content in  it - <app></app>) inside JSX will instantiate it
-> always one component per file

Functional based component vs class based component:
Whenever component needs to be aware of its state and communicate with other components —> we use class based component.
Class based component should have render() and it should return JSX.

State
	Plain JS object that exists on any class based component. Each instance of class based component has its own copy of state
	(functional components do not have state).  whenever component state changes, it immediately re-renders and forces its children
	(components nested inside it) to re-render as well. Before we use state inside a component, we need to initialize state first.
	We initialize state as:
class SearchBar extends React.component {
	constructor (props) {
		super(props);
		this.state = {…}
	}
	render() {
		return (
			<div> Hello World! </div>
		);
	}
}

Manipulating state: Only inside constructor(), we’ll have something like this.state = {}. Everywhere else,  we’ll use this.setState() to modify state.
ex: Let’s say we initialized state as
class SearchBar extends React.component {
    constructor (props) {
        super(props);
        this.state = { term: ‘’};
    }
    render() {
        return (
            <input onChange = {this.onInputChange.bind(this)} />
            <span> Value of Input: {this.state.term} </span>
        );
    }
    onInputChange(event) {
        this.state.term = event.target.value; // BAD!!!! DON’T DO IT
        this.setState( { term: event.target.value }); // GOOD!!
        // while setting always use setState(), but while getting, you can use this.state.term
    }
}

Downward data flow: Most parent component should be responsible for fetching data.

Passing data from parent component to child component: by passing as a property (passing props)

Passing data from child component to parent component: by passing callbacks from parent to child

Stay away from JS 'for' loop in JSX. Use built-in iterators (map ex.)

REDUX:
 Refers to application level global state (data of our app).
 Redux serves to construct application state and React provides the views to display that state. We can bridge the two (two separate libraries react and redux)
 to get a working usable app by using the library 'react-redux'.
 So, the two libraries are inherently disconnected and only through use of React-Redux library, we can get clear connection between the two.
 A react component can connect to state (application state) by promoting it as a container.
 Dumb component - component not connected to redux (or not having access to app state)
 Smart component (container) - can access app level state
 * Only the most parent component that uses a particular piece of state needs to be made as a container (or connected to Redux). In the ex below,
 BookList and BookDetail to be promoted as containers (not App, as it just renders both BookList and BookDetail components and not necessarily uses or cares
 about state), though you can go that way as well.
 Dispatching actions can modify state of our applications, so components only dispatching actions (and empty mapStateToProps()) should be promoted as containers.

Application state is one single piece of object. Ex:
{
    books: [{title: 'Harry Potter 1', desc: 'Harry Potter and the Chamber of Secrets'}, {..}, ..],
    activeBook: {title: 'Harry Potter 6', desc: '...'}
}

Reducer
    A function returning a piece of application state.
    We have different reducers for various pieces of application state. For ex, one reducer fn for list of books, and one for activeBook (selectedBook).
    In the above ex, books piece of state is produced by BooksReducer and activeBook piece of state is produced by ActiveBookReducer.
    Reducer function takes two arguments - state and action. Reducer function is invoked only when action is triggered. 'state' argument is not whole app
    level state, but state that this reducer is responsible for.
Container
    A component that has to be aware of the state contained in the Redux is promoted as a container.
    So, a container is a normal React component that gets bonded to the application state.
    Whenever application state changes, the container will re-render as well.
Action & Action Creator
    An 'Action Creator' is just a function that returns an action, and an 'Action' is just an object that flows through all of our reducers.
    Reducers can then use that action to produce a different value for that particular piece of state.
    An event (Direct like onClick, onKeyDown, onScroll etc or Indirect like ajax request sucess, page load etc.) will trigger an Action Creator.
    Action object will have type (mandatory) and payload (optional).
API calls with Redux
    We want react components to be responsible for showing data alone, not fetching data. We'll rely on Redux for that.

